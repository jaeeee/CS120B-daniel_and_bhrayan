// #include <avr/io.h>
// #include <avr/interrupt.h>

void ADC_init() {
ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
// ADEN: setting this bit enables analog-to-digital conversion.
// ADSC: setting this bit starts the first conversion.
// ADATE: setting this bit enables auto-triggering. Since we are
//        in Free Running Mode, a new conversion will trigger whenever
//        the previous conversion completes.
}

//part 1 lab
int main(void) {
DDRA = 0x00; PORTA = 0xFF;
DDRB = 0xFF; PORTB = 0x00;
DDRD = 0xFF; PORTD = 0x00;
ADC_init();
// ADC_init();
while(1){
unsigned short x = ADC;
unsigned char lower8 = (char)x;
PORTB = lower8;
unsigned char upper2 = (char)(x >> 8);
PORTD = upper2;
}
}

//part2 lab
int main(void) {
DDRA = 0x00; PORTA = 0xFF;
DDRB = 0xFF; PORTB = 0x00;
DDRD = 0xFF; PORTD = 0x00;
ADC_init();
// ADC_init();
while(1){
unsigned short x = ~ADC;
unsigned char lower8 = (char)x;
PORTB = lower8;
unsigned char upper2 = (char)(x >> 8);
PORTD = upper2;
}
}

//part 3
int main(void) {
  unsigned short max = 200;
  unsigned char output = 0x00;
DDRA = 0x00; PORTA = 0xFF;
DDRB = 0xFF; PORTB = 0x00;
DDRD = 0xFF; PORTD = 0x00;
ADC_init();
while(1) {
  unsigned short x = ADC;
  if (x > max) {
    max = x;
  } else if (x >= max/2) {
    output = 0x01;
  } else {
    output = 0x00;
  }
  PORTB = output;
}
}

//part 4
int main(void) {
  unsigned short max = 200;
  unsigned char output = 0x00;
DDRA = 0x00; PORTA = 0xFF;
DDRB = 0xFF; PORTB = 0x00;
DDRD = 0xFF; PORTD = 0x00;
ADC_init();
while(1) {
  unsigned short x = ADC;
  if (x <= 0) {
    output = 0x00;
  } else if (x >= max) {
    output = 0x80;
  } else if (x >= 175) {
    output = 0x40;
  } else if (x >= 150) {
    output = 0x20;
  } else if (x >= 125) {
    output = 0x10;
  } else if (x >= 100) {
    output = 0x08;
  } else if (x >= 75) {
    output = 0x04;
  } else if (x >= 50) {
    output = 0x02;
  } else if (x >= 50) {
    output = 0x01;
  }
  PORTB = output;
}
}
